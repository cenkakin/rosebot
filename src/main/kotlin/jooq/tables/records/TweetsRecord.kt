/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records


import java.time.LocalDateTime
import java.util.UUID

import jooq.tables.Tweets

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TweetsRecord() : UpdatableRecordImpl<TweetsRecord>(Tweets.TWEETS), Record3<UUID?, LocalDateTime?, LocalDateTime?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row3<UUID?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row3<UUID?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<UUID?> = Tweets.TWEETS.ID
    override fun field2(): Field<LocalDateTime?> = Tweets.TWEETS.CREATED_AT
    override fun field3(): Field<LocalDateTime?> = Tweets.TWEETS.UPDATED_AT
    override fun component1(): UUID? = id
    override fun component2(): LocalDateTime? = createdAt
    override fun component3(): LocalDateTime? = updatedAt
    override fun value1(): UUID? = id
    override fun value2(): LocalDateTime? = createdAt
    override fun value3(): LocalDateTime? = updatedAt

    override fun value1(value: UUID?): TweetsRecord {
        this.id = value
        return this
    }

    override fun value2(value: LocalDateTime?): TweetsRecord {
        this.createdAt = value
        return this
    }

    override fun value3(value: LocalDateTime?): TweetsRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: UUID?, value2: LocalDateTime?, value3: LocalDateTime?): TweetsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TweetsRecord
     */
    constructor(id: UUID? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.createdAt = createdAt
        this.updatedAt = updatedAt
    }
}
