/*
 * This file is generated by jOOQ.
 */
package jooq.tables


import java.time.LocalDateTime
import java.util.UUID

import jooq.Public
import jooq.keys.TWEETS_PKEY
import jooq.tables.records.TweetsRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tweets(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TweetsRecord>?,
    aliased: Table<TweetsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TweetsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.tweets</code>
         */
        val TWEETS = Tweets()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TweetsRecord> = TweetsRecord::class.java

    /**
     * The column <code>public.tweets.id</code>.
     */
    val ID: TableField<TweetsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.tweets.created_at</code>.
     */
    val CREATED_AT: TableField<TweetsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.tweets.updated_at</code>.
     */
    val UPDATED_AT: TableField<TweetsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<TweetsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TweetsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tweets</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tweets</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tweets</code> table reference
     */
    constructor(): this(DSL.name("tweets"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TweetsRecord>): this(Internal.createPathAlias(child, key), child, key, TWEETS, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<TweetsRecord> = TWEETS_PKEY
    override fun getKeys(): List<UniqueKey<TweetsRecord>> = listOf(TWEETS_PKEY)
    override fun `as`(alias: String): Tweets = Tweets(DSL.name(alias), this)
    override fun `as`(alias: Name): Tweets = Tweets(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tweets = Tweets(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tweets = Tweets(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UUID?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row3<UUID?, LocalDateTime?, LocalDateTime?>
}
